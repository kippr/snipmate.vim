snippet #!
	#!/usr/bin/env python

snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
snippet kpt todo: something to come back to
	# kp: todo: ${1}
snippet kpx XXXX: something to resolve pre-commit
	# kp: XXXX: ${1}
snippet kp refactor: something that will only be possible later
	# kp: refactor: ${1}
snippet kps style: not sure what the best/ most pythonesque way to solve this is
	# kp: style: ${1}
snippet kp qq: quick question for someone
	# kp: qq: ${1}
snippet kp slime: test slime that should be resolved pre-commit
	# kp: slime: ${1}
snippet pdb Set debug trace
	import ipdb; ipdb.set_trace()
snippet skip Skip test
	from nose.plugins.skip import SkipTest; raise SkipTest
snippet stt Set scoped debug trace
	from misweb.avocacommon import scoped_trace; scoped_trace.trace()
snippet sta Scoped trace activation decorator
	from misweb.avocacommon import scoped_trace
	@scoped_trace.active
snippet unit Unittest case import
	from unittest import TestCase as UnitTestCase
snippet fixtest Django Fixture Integration testcase import
	from django_nose import FastFixtureTestCase as FixtureTestCase
snippet main __main__ name check
	if __name__ == "__main__":
	    ${1}
